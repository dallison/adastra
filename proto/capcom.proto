syntax = "proto3";

package stagezero.capcom.proto;

import "proto/config.proto";

message InitRequest { string client_name = 1; }

message InitResponse {
  string error = 1;
  int32 event_port = 2;
}

message AddComputeRequest {
  string name = 1;
  bytes ip_addr = 2;  // Host byte order.
  int32 port = 3;       // Host byte order.
}

message AddComputeResponse {
  string error = 1;
}

message RemoveComputeRequest {
  string name = 1;
}

message RemoveComputeResponse {
  string error = 1;
}

message Process {
  config.ProcessOptions options = 1;

  oneof proc {
    config.StaticProcess static_process = 2;
    config.StaticProcess zygote = 3;
    config.VirtualProcess virtual_process = 4;
  }

  // Where this process will be run.  Leave empty for localhost.
  // For a virtual process, the zygote must be running on the same
  // compute.
  string compute = 5;
}

message AddSubsystemRequest {
  string name = 1;
  repeated Process processes = 2;

  // Variables common to this subsystem.
  repeated config.Variable vars = 3;

  // Args to pass to all processes in this subsystem.
  repeated string args = 4;

  // Names of children subsystems.  They must exist.
  repeated string children = 45;
}

message AddSubsystemResponse { string error = 1; }

message RemoveSubsystemRequest {
  string subsystem = 1;
  bool recursive = 2;
}

message RemoveSubsystemResponse { string error = 1; }

message StartSubsystemRequest { string subsystem = 1; }

message StartSubsystemResponse { string error = 1; }

message StopSubsystemRequest { string subsystem = 1; }

message StopSubsystemResponse { string error = 1; }

message GetSubsystemsRequest {
}

message GetSubsystemsResponse {
  string error = 1;
  repeated SubsystemStatus subsystems = 2;
}

message GetAlarmsRequest {
}

message GetAlarmsResponse {
   string error = 1;
  repeated Alarm alarms = 2;

}

message AbortRequest {
  string reason = 1;      // Why we are aborting.
}

message AbortResponse {
  string error = 1;     
}

message Request {
  oneof request {
    InitRequest init = 1;
    AddComputeRequest add_compute = 2;
    RemoveComputeRequest remove_compute = 3;
    AddSubsystemRequest add_subsystem = 4;
    RemoveSubsystemRequest remove_subsystem = 5;
    StartSubsystemRequest start_subsystem = 6;
    StopSubsystemRequest stop_subsystem = 7;
    GetSubsystemsRequest get_subsystems = 8;
    GetAlarmsRequest get_alarms = 9;
    AbortRequest abort = 10;
  }
}

message Response {
  oneof response {
    InitResponse init = 1;
    AddComputeResponse add_compute = 2;
    RemoveComputeResponse remove_compute = 3;
    AddSubsystemResponse add_subsystem = 4;
    RemoveSubsystemResponse remove_subsystem = 5;
    StartSubsystemResponse start_subsystem = 6;
    StopSubsystemResponse stop_subsystem = 7;
    GetSubsystemsResponse get_subsystems = 8;
    GetAlarmsResponse get_alarms = 9;
    AbortResponse abort = 10;
  }
}

enum AdminState {
  NO_ADMIN_STATE = 0;
  ADMIN_OFFLINE = 1;
  ADMIN_ONLINE = 2;
}

enum OperState {
  NO_OPER_STATE = 0;
  OPER_OFFLINE = 1;
  OPER_STARTING_CHILDREN = 2;
  OPER_STARTING_PROCESSES = 3;
  OPER_ONLINE = 4;
  OPER_STOPPING_PROCESSES = 5;
  OPER_STOPPING_CHILDREN = 6;
  OPER_RESTARTING = 7;
  OPER_BROKEN = 8;
}

message SubsystemStatus {
  message Process {
    string name = 1;
    string process_id = 2;
    int32 pid = 3;
    bool running = 4;
  }

  string name = 1;
  AdminState admin_state = 2;
  OperState oper_state = 3;
  repeated Process processes = 4;
}

message Alarm {
  enum Type {
    UNKNOWN_TYPE = 0;
    SUBSYSTEM = 1;
    PROCESS = 2;
  }

  enum Severity {
    UNKNOWN_SEVERITY = 0;
    WARNING = 2;
    ERROR = 3;
    CRITICAL = 4;
  }

  enum Reason {
    UNKNOWN_REASON = 0;
    CRASHED = 1;
    BROKEN = 2;
  }

  enum Status {
    UNKNOWN_STATUS = 0;
    RAISED = 1;
    CLEARED = 2;
  }

  string id = 1;
  Type type = 2;
  string name = 3;
  Severity severity = 4;
  Reason reason = 5;
  Status status = 6;
  string details = 7;
}

message Event {
  oneof event {
    SubsystemStatus subsystem_status = 1;
    Alarm alarm = 2;
  }
}