syntax = "proto3";

package stagezero.capcom.proto;

import "stagezero/proto/config.proto";

message InitRequest { string client_name = 1; }

message InitResponse {
  string error = 1;
  int32 event_port = 2;
}

message Process {
  config.ProcessOptions options = 1;

  oneof proc {
    config.StaticProcess static_process = 2;
    config.StaticProcess zygote = 3;
    config.VirtualProcess virtual_process = 4;
  }
}

message AddSubsystemRequest {
  string name = 1;
  repeated Process processes = 2;

  // Variables common to this subsystem.
  repeated config.Variable vars = 3;

  // Args to pass to all processes in this subsystem.
  repeated string args = 4;

  // Names of children subsystems.  They must exist.
  repeated string children = 45;
}

message AddSubsystemResponse { string error = 1; }

message RemoveSubsystemRequest {
  string subsystem = 1;
  bool recursive = 2;
}

message RemoveSubsystemResponse { string error = 1; }

message StartSubsystemRequest { string subsystem = 1; }

message StartSubsystemResponse { string error = 1; }

message StopSubsystemRequest { string subsystem = 1; }

message StopSubsystemResponse { string error = 1; }

message Request {
  oneof request {
    InitRequest init = 1;
    AddSubsystemRequest add_subsystem = 2;
    RemoveSubsystemRequest remove_subsystem = 3;
    StartSubsystemRequest start_subsystem = 4;
    StopSubsystemRequest stop_subsystem = 5;
  }
}

message Response {
  oneof response {
    InitResponse init = 1;
    AddSubsystemResponse add_subsystem = 2;
    RemoveSubsystemResponse remove_subsystem = 3;
    StartSubsystemResponse start_subsystem = 4;
    StopSubsystemResponse stop_subsystem = 5;
  }
}

enum AdminState {
  NO_ADMIN_STATE = 0;
  ADMIN_OFFLINE = 1;
  ADMIN_ONLINE = 2;
}

enum OperState {
  NO_OPER_STATE = 0;
  OPER_OFFLINE = 1;
  OPER_STARTING_CHILDREN = 2;
  OPER_STARTING_PROCESSES = 3;
  OPER_ONLINE = 4;
  OPER_STOPPING_PROCESSES = 5;
  OPER_STOPPING_CHILDREN = 6;
}

message SubsystemStatus {
  string name = 1;
  AdminState admin_state = 2;
  OperState oper_state = 3;
}

message Event {
  oneof event {
    SubsystemStatus subsystem_status = 1;
  }
}