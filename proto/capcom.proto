// Copyright 2024 David Allison
// All Rights Reserved
// See LICENSE file for licensing information.

syntax = "proto3";

package adastra.capcom.proto;

import "proto/config.proto";
import "proto/event.proto";
import "proto/stream.proto";
import "proto/subsystem_status.proto";
import "proto/parameters.proto";

message InitRequest {
  string client_name = 1;
  int32 event_mask = 2;
}

message InitResponse {
  string error = 1;
  int32 event_port = 2;
}

message AddComputeRequest { stagezero.config.Compute compute = 1; }

message AddComputeResponse { string error = 1; }

message RemoveComputeRequest { string name = 1; }

message RemoveComputeResponse { string error = 1; }

message Process {
  stagezero.config.ProcessOptions options = 1;

  oneof proc {
    stagezero.config.StaticProcess static_process = 2;
    stagezero.config.StaticProcess zygote = 3;
    stagezero.config.VirtualProcess virtual_process = 4;
  }

  // Where this process will be run.  Leave empty for localhost.
  // For a virtual process, the zygote must be running on the same
  // compute.
  string compute = 5;

  // Stream control.
  repeated stagezero.proto.StreamControl streams = 6;

  // Max restarts for process-only restart policy.
  int32 max_restarts = 7;
}

message AddSubsystemRequest {
  enum RestartPolicy {
    AUTOMATIC = 0;
    MANUAL = 1;
    PROCESS_ONLY = 2; // Restart a crashed process, not the subsystem.
  }

  string name = 1;
  repeated Process processes = 2;

  // Variables common to this subsystem.
  repeated stagezero.config.Variable vars = 3;

  // Args to pass to all processes in this subsystem.
  repeated string args = 4;

  // Default stream control for all processes.
  repeated stagezero.proto.StreamControl streams = 5;

  // Names of children subsystems.  They must exist.
  repeated string children = 6;

  // Max number of restarts before being broken.
  int32 max_restarts = 7;

  bool critical = 8;

  RestartPolicy restart_policy = 9;
}

message AddSubsystemResponse { string error = 1; }

message RemoveSubsystemRequest {
  string subsystem = 1;
  bool recursive = 2;
}

message RemoveSubsystemResponse { string error = 1; }

message StartSubsystemRequest {
  string subsystem = 1;
  bool interactive = 2;
  stagezero.proto.Terminal terminal = 3;
}

message StartSubsystemResponse { string error = 1; }

message RestartSubsystemRequest { string subsystem = 1; }

message RestartSubsystemResponse { string error = 1; }

message RestartProcessesRequest {
  string subsystem = 1;
  // If processes is empty, all processes will be restarted, otherwise
  // only the processes listed will be restarted.
  repeated string processes = 2;
}

message RestartProcessesResponse { string error = 1; }

message StopSubsystemRequest { string subsystem = 1; }

message StopSubsystemResponse { string error = 1; }

message GetSubsystemsRequest {}

message GetSubsystemsResponse {
  string error = 1;
  repeated adastra.proto.SubsystemStatus subsystems = 2;
}

message GetAlarmsRequest {}

message GetAlarmsResponse {
  string error = 1;
  repeated adastra.proto.Alarm alarms = 2;
}

message AbortRequest {
  string reason = 1;  // Why we are aborting.
  bool emergency = 2; // Emergency abort - shutdown.
}

message AbortResponse { string error = 1; }

message AddGlobalVariableRequest { stagezero.config.Variable var = 1; }

message AddGlobalVariableResponse { string error = 1; }

message InputRequest {
  string subsystem = 1;
  string process = 2;
  bytes data = 3;
  int32 fd = 4;
}

message InputResponse { string error = 1; }

message CloseFdRequest {
  string subsystem = 1;
  string process = 2;
  int32 fd = 3;
}

message CloseFdResponse { string error = 1; }

message FreezeCgroupRequest {
  string compute = 1;
  string cgroup = 2;
}

message FreezeCgroupResponse { string error = 1; }

message ThawCgroupRequest {
  string compute = 1;
  string cgroup = 2;
}

message ThawCgroupResponse { string error = 1; }

message KillCgroupRequest {
  string compute = 1;
  string cgroup = 2;
}

message KillCgroupResponse { string error = 1; }

message SetParameterRequest {
  string name = 1;
  adastra.proto.parameters.Value value = 2;
}

message SetParameterResponse { string error = 1; }

message DeleteParameterRequest { string name = 1; }
message DeleteParameterResponse { string error = 1; }
message UploadParametersRequest {
  repeated adastra.proto.parameters.Parameter parameters = 1;
}
message UploadParametersResponse { string error = 1; }

message Request {
  oneof request {
    InitRequest init = 1;
    AddComputeRequest add_compute = 2;
    RemoveComputeRequest remove_compute = 3;
    AddSubsystemRequest add_subsystem = 4;
    RemoveSubsystemRequest remove_subsystem = 5;
    StartSubsystemRequest start_subsystem = 6;
    StopSubsystemRequest stop_subsystem = 7;
    GetSubsystemsRequest get_subsystems = 8;
    GetAlarmsRequest get_alarms = 9;
    AbortRequest abort = 10;
    AddGlobalVariableRequest add_global_variable = 11;
    InputRequest input = 12;
    CloseFdRequest close_fd = 13;
    RestartSubsystemRequest restart_subsystem = 14;
    FreezeCgroupRequest freeze_cgroup = 15;
    ThawCgroupRequest thaw_cgroup = 16;
    KillCgroupRequest kill_cgroup = 17;
    RestartProcessesRequest restart_processes = 19;
    SetParameterRequest set_parameter = 20;
    DeleteParameterRequest delete_parameter = 21;
    UploadParametersRequest upload_parameters = 22;
  }
}

message Response {
  oneof response {
    InitResponse init = 1;
    AddComputeResponse add_compute = 2;
    RemoveComputeResponse remove_compute = 3;
    AddSubsystemResponse add_subsystem = 4;
    RemoveSubsystemResponse remove_subsystem = 5;
    StartSubsystemResponse start_subsystem = 6;
    StopSubsystemResponse stop_subsystem = 7;
    GetSubsystemsResponse get_subsystems = 8;
    GetAlarmsResponse get_alarms = 9;
    AbortResponse abort = 10;
    AddGlobalVariableResponse add_global_variable = 11;
    InputResponse input = 12;
    CloseFdResponse close_fd = 13;
    RestartSubsystemResponse restart_subsystem = 14;
    FreezeCgroupResponse freeze_cgroup = 15;
    ThawCgroupResponse thaw_cgroup = 16;
    KillCgroupResponse kill_cgroup = 17;
    RestartProcessesResponse restart_processes = 19;
    SetParameterResponse set_parameter = 20;
    DeleteParameterResponse delete_parameter = 21;
    UploadParametersResponse upload_parameters = 22;
  }
}
