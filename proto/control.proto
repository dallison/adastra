// Copyright 2024 David Allison
// All Rights Reserved
// See LICENSE file for licensing information.

syntax = "proto3";

package adastra.stagezero.control;

import "proto/config.proto";
import "proto/stream.proto";
import "proto/log.proto";
import "proto/cgroup.proto";
import "proto/parameters.proto";
import "proto/telemetry.proto";
import "google/protobuf/any.proto";

message InitRequest {
  string client_name = 1;
  string compute = 2;
  int32 event_mask = 3;
}

message InitResponse {
  string error = 1;
  int32 event_port = 2;
}

message LaunchStaticProcessRequest {
  config.StaticProcess proc = 1;
  config.ProcessOptions opts = 2;
  repeated stagezero.proto.StreamControl streams = 3;
}

message LaunchVirtualProcessRequest {
  config.VirtualProcess proc = 1;
  config.ProcessOptions opts = 2;
  repeated stagezero.proto.StreamControl streams = 3;
}

message LaunchResponse {
  string error = 1;      // Empty for success.
  string process_id = 2; // Unique ID for process.
  int32 pid = 3;         // OS provided pid.
}

message StopProcessRequest { string process_id = 1; }

message StopProcessResponse {
  string error = 1; // Empty if stop worked.
}

message InputDataRequest {
  string process_id = 1;
  bytes data = 2;

  // Destination fd.  This corresponds to the stream_fd in the
  // StreamControl message.  For example, 1 is stdout, 0 is stdin...
  int32 fd = 3;
}

message InputDataResponse { string error = 1; }

message CloseProcessFileDescriptorRequest {
  string process_id = 1;
  int32 fd = 2;
}

message CloseProcessFileDescriptorResponse { string error = 1; }

message SetGlobalVariableRequest {
  string name = 1;
  string value = 2;
  bool exported = 3; // True to export to environment for processes.
}

message SetGlobalVariableResponse { string error = 1; }

message GetGlobalVariableRequest { string name = 1; }

message GetGlobalVariableResponse {
  string error = 1;
  string name = 2;
  string value = 3;
  bool exported = 4; // True if exported to environment for processes.
}

message AbortRequest {
  string reason = 1;
  bool emergency = 2; // Emergency abort, all processes down.
}

message AbortResponse { string error = 1; }

message AddCgroupRequest { config.Cgroup cgroup = 1; }

message AddCgroupResponse { string error = 1; }

message RemoveCgroupRequest { string cgroup = 1; }

message RemoveCgroupResponse { string error = 1; }

message FreezeCgroupRequest { string cgroup = 1; }

message FreezeCgroupResponse { string error = 1; }

message ThawCgroupRequest { string cgroup = 1; }

message ThawCgroupResponse { string error = 1; }

message KillCgroupRequest { string cgroup = 1; }

message KillCgroupResponse { string error = 1; }

message SetParameterRequest {
  string name = 1;
  adastra.proto.parameters.Value value = 2;
}

message SetParameterResponse { string error = 1; }

message DeleteParametersRequest {
  repeated string names = 1; // Empty means all.
}
message DeleteParametersResponse { string error = 1; }
message UploadParametersRequest {
  repeated adastra.proto.parameters.Parameter parameters = 1;
}
message UploadParametersResponse { string error = 1; }

message SendTelemetryCommandRequest {
  string process_id = 1;
  adastra.proto.telemetry.Command command = 2;
}

message SendTelemetryCommandResponse { string error = 1; }

message Request {
  oneof request {
    InitRequest init = 1;
    LaunchStaticProcessRequest launch_static_process = 2;
    LaunchStaticProcessRequest launch_zygote = 3;
    LaunchVirtualProcessRequest launch_virtual_process = 4;
    StopProcessRequest stop = 5;
    InputDataRequest input_data = 6;
    CloseProcessFileDescriptorRequest close_process_file_descriptor = 7;
    SetGlobalVariableRequest set_global_variable = 8;
    GetGlobalVariableRequest get_global_variable = 9;
    AbortRequest abort = 10;
    AddCgroupRequest add_cgroup = 11;
    RemoveCgroupRequest remove_cgroup = 12;
    FreezeCgroupRequest freeze_cgroup = 13;
    ThawCgroupRequest thaw_cgroup = 14;
    KillCgroupRequest kill_cgroup = 15;
    SetParameterRequest set_parameter = 16;
    DeleteParametersRequest delete_parameters = 17;
    UploadParametersRequest upload_parameters = 18;
    SendTelemetryCommandRequest send_telemetry_command = 19;
  }
}

message Response {
  oneof response {
    InitResponse init = 1;
    LaunchResponse launch = 2;
    StopProcessResponse stop = 3;
    InputDataResponse input_data = 4;
    CloseProcessFileDescriptorResponse close_process_file_descriptor = 5;
    SetGlobalVariableResponse set_global_variable = 6;
    GetGlobalVariableResponse get_global_variable = 7;
    AbortResponse abort = 8;
    AddCgroupResponse add_cgroup = 9;
    RemoveCgroupResponse remove_cgroup = 10;
    FreezeCgroupResponse freeze_cgroup = 11;
    ThawCgroupResponse thaw_cgroup = 12;
    KillCgroupResponse kill_cgroup = 13;
    SetParameterResponse set_parameter = 14;
    DeleteParametersResponse delete_parameters = 15;
    UploadParametersResponse upload_parameters = 16;
    SendTelemetryCommandResponse send_telemetry_command = 17;
  }
}

message StartEvent { string process_id = 1; }

message StopEvent {
  enum Reason {
    UNKNOWN = 0;
    EXIT = 1;
    SIGNAL = 2;
  }
  string process_id = 1;
  Reason reason = 2;       // Why process exited.
  int32 sig_or_status = 3; // Signal number or exit status.
}

message OutputEvent {
  string process_id = 1;
  bytes data = 2;
  int32 fd = 3; // What fd sent it
}

message ConnectEvent {}

message DisconnectEvent { string compute = 1; }

message TelemetryEvent {
  string process_id = 1; // Source process ID
  uint64 timestamp = 2;
  string compute = 3; // Compute instance
  adastra.proto.telemetry.Status telemetry = 4;
}

message Event {
  oneof event {
    StartEvent start = 51;
    StopEvent stop = 52;
    OutputEvent output = 53;
    adastra.proto.LogMessage log = 54;
    adastra.proto.parameters.ParameterEvent parameter = 55;
    ConnectEvent connect = 56;
    DisconnectEvent disconnect = 57;
    TelemetryEvent telemetry = 58;
  }
}

// These messages are sent through the zygote control socket.

// Spawn a virtual process from a zygote.
message SpawnRequest {
  // File descriptor redirection
  message Stream {
    int32 fd = 1;    // FD to redirect
    int32 index = 2; // Index into SCM_RIGHTS for src fd.
    bool close = 3;  // Close the stream, don't redirect.

    // Streams for files are opened by the spawned process.  The information
    // needed for that is in filename and direction.
    optional string filename = 4; // For file streams.
    optional stagezero.proto.StreamControl.Direction direction = 5;
  }
  string name = 1; // Process name
  string dso = 2;  // Load this DSO (empty means already linked)

  string main_func = 3; // Function to call in child.

  repeated Stream streams = 4;
  repeated config.Variable global_vars = 5; // Global variables and environment.
  repeated config.Variable vars = 6;        // Local variables and environment.
  repeated string args = 7;                 // Use $var in expressions.
  string user = 8;
  string group = 9;

  optional int32 notify_fd_index = 10; // Index of notify fd (into fds)

  string cgroup = 11; // Cgroup for process (if supported by OS)

  // Namespaces, only on Linux.
  optional config.Namespace ns = 12;
  optional int32 parameters_read_fd_index =
      13; // Index of parameters read fd (into fds)
  optional int32 parameters_write_fd_index =
      14; // Index of parameters write fd (into fds)
  optional int32 parameters_events_fd_index =
      15; // Index of parameters write fd (into fds)
  optional int32 telemetry_read_fd_index =
      16; // Index of telemetry read fd (into fds)
  optional int32 telemetry_write_fd_index =
      17; // Index of telemetry write fd (into fds)
}

message SpawnResponse {
  string error = 1;
  int32 pid = 2; // PID of child.
  int32 pidfd_index =
      3; // On Linux the index into the fds array for the process's pidfd.
}
