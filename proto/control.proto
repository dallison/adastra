// Copyright 2023 David Allison
// All Rights Reserved
// See LICENSE file for licensing information.

syntax = "proto3";

package stagezero.control;

import "proto/config.proto";
import "proto/stream.proto";
import "proto/log.proto";

message InitRequest {
  string client_name = 1;
  string compute = 2;
  int32 event_mask = 3;
}

message InitResponse {
  string error = 1;
  int32 event_port = 2;
}

message LaunchStaticProcessRequest {
  config.StaticProcess proc = 1;
  config.ProcessOptions opts = 2;
  repeated stagezero.proto.StreamControl streams = 3;
}

message LaunchVirtualProcessRequest {
  config.VirtualProcess proc = 1;
  config.ProcessOptions opts = 2;
  repeated stagezero.proto.StreamControl streams = 3;
}

message LaunchResponse {
  string error = 1;      // Empty for success.
  string process_id = 2; // Unique ID for process.
  int32 pid = 3;         // OS provided pid.
}

message StopProcessRequest { string process_id = 1; }

message StopProcessResponse {
  string error = 1; // Empty if stop worked.
}

message InputDataRequest {
  string process_id = 1;
  bytes data = 2;

  // Destination fd.  This corresponds to the stream_fd in the
  // StreamControl message.  For example, 1 is stdout, 0 is stdin...
  int32 fd = 3;
}

message InputDataResponse { string error = 1; }

message CloseProcessFileDescriptorRequest {
  string process_id = 1;
  int32 fd = 2;
}

message CloseProcessFileDescriptorResponse { string error = 1; }

message SetGlobalVariableRequest {
  string name = 1;
  string value = 2;
  bool exported = 3; // True to export to environment for processes.
}

message SetGlobalVariableResponse { string error = 1; }

message GetGlobalVariableRequest { string name = 1; }

message GetGlobalVariableResponse {
  string error = 1;
  string name = 2;
  string value = 3;
  bool exported = 4; // True if exported to environment for processes.
}

message AbortRequest {
  string reason = 1;
  bool emergency = 2;     // Emergency abort, all processes down.
}

message AbortResponse { string error = 1; }

message Request {
  oneof request {
    InitRequest init = 1;
    LaunchStaticProcessRequest launch_static_process = 2;
    LaunchStaticProcessRequest launch_zygote = 3;
    LaunchVirtualProcessRequest launch_virtual_process = 4;
    StopProcessRequest stop = 5;
    InputDataRequest input_data = 6;
    CloseProcessFileDescriptorRequest close_process_file_descriptor = 7;
    SetGlobalVariableRequest set_global_variable = 8;
    GetGlobalVariableRequest get_global_variable = 9;
    AbortRequest abort = 10;
  }
}

message Response {
  oneof response {
    InitResponse init = 1;
    LaunchResponse launch = 2;
    StopProcessResponse stop = 3;
    InputDataResponse input_data = 4;
    CloseProcessFileDescriptorResponse close_process_file_descriptor = 5;
    SetGlobalVariableResponse set_global_variable = 6;
    GetGlobalVariableResponse get_global_variable = 7;
    AbortResponse abort = 8;
  }
}

message StartEvent { string process_id = 1; }

message StopEvent {
  enum Reason {
    UNKNOWN = 0;
    EXIT = 1;
    SIGNAL = 2;
  }
  string process_id = 1;
  Reason reason = 2;      // Why process exited.
  int32 sig_or_status = 3;  // Signal number or exit status.
}

message OutputEvent {
  string process_id = 1;
  bytes data = 2;
  int32 fd = 3; // What fd sent it
}

message Event {
  oneof event {
    StartEvent start = 51;
    StopEvent stop = 52;
    OutputEvent output = 53;
    stagezero.proto.LogMessage log = 54;
  }
}

// These messages are sent through the zygote control socket.

// Spawn a virtual process from a zygote.
message SpawnRequest {
  // File descriptor redirection
  message Stream {
    int32 fd = 1;    // FD to redirect
    int32 index = 2; // Index into SCM_RIGHTS for src fd.
    bool close = 3;  // Close the stream, don't redirect.

    // Streams for files are opened by the spawned process.  The information
    // needed for that is in filename and direction.
    optional string filename = 4; // For file streams.
    optional stagezero.proto.StreamControl.Direction direction = 5;
  }
  string dso = 1; // Load this DSO (empty means already linked)

  string main_func = 2; // Function to call in child.

  repeated Stream streams = 3;
  repeated config.Variable global_vars = 4; // Global variables and environment.
  repeated config.Variable vars = 5;        // Local variables and environment.
  repeated string args = 6;                 // Use $var in expressions.
  string user = 7;
  string group = 8;
}

message SpawnResponse {
  string error = 1;
  int32 pid = 2; // PID of child.
}