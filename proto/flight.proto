syntax = "proto3";

package stagezero.flight;

message Variable {
  string name = 1;     // Varible name
  string value = 2;    // Expression for value (use $ for var names)
  bool exported = 3;     // Export to environment.
}

message ModuleOptions {
  string description = 1;

  repeated Variable vars = 2; // Local variables and environment.
  repeated string args = 3;          // Use $var in expressions.

  // Timeouts for shutdown.  The sigint timeout is the number of
  // seconds beteen sending SIGINT and SIGTERM.  -1 means no
  // SIGINT is sent.  Likewise, sigterm timeout is the number of
  // seconds between SIGTERM and SIGKILL.  A value of 0 means
  // use reasonable defaults.©57
  int32 sigint_shutdown_timeout_secs = 4;
  int32 sigterm_shutdown_timeout_secs = 5;

  // If the process will notify us, we wait this long for it
  // to do so.
  int32 startup_timeout_secs = 6;
}

message ProcessOptions {
  string description = 1;

  repeated Variable vars = 2; // Local variables and environment.
  repeated string args = 3;          // Use $var in expressions.

  // Timeouts for shutdown.  The sigint timeout is the number of
  // seconds beteen sending SIGINT and SIGTERM.  -1 means no
  // SIGINT is sent.  Likewise, sigterm timeout is the number of
  // seconds between SIGTERM and SIGKILL.  A value of 0 means
  // use reasonable defaults.©57
  int32 sigint_shutdown_timeout_secs = 4;
  int32 sigterm_shutdown_timeout_secs = 5;

  bool notify = 6;      // Notify of startup via pipe.

  // If the process will notify us, we wait this long for it
  // to do so.
  int32 startup_timeout_secs = 7;
}

message Module {
  string name = 1;
  string dso = 2;
  string zygote = 3;
  ModuleOptions options = 4;
}

message StaticProcess {
  string name = 1;
  string executable = 2;
  ProcessOptions options = 3;
}

message Subsystem {
  string name = 1;
  repeated StaticProcess static_processes = 2;
  repeated Module modules = 3;

  // Variables common to this subsystem.
  repeated Variable vars = 4;

  // Args to pass to all processes in this subsystem.
  repeated string args = 5;

  // Names of dependent subsystems.  These must be online in
  // order for this module to be online.  They are started before
  // this module and shutdown after this module.  If a dependency
  // restart, this module will restart.
  repeated string deps = 6;
}

message SubsystemGraph {
  repeated Subsystem subsystems = 1;
  repeated string interfaces = 2;
}

message LoadGraphRequest {

}

message LoadGraphResponse {

}

message StartSubsystemRequest { string subsystem = 1; }

message StartSubsystemResponse { string error = 1; }

message StopSubsystemRequest { string subsystem = 1; }

message StopSubsystemResponse { string error = 1; }

message GetSubsystemsRequest {
}

message GetSubsystemsResponse {
  string error = 1;
  repeated SubsystemStatus subsystems = 2;
}

message GetAlarmsRequest {
}

message GetAlarmsResponse {
   string error = 1;
  repeated Alarm alarms = 2;

}

message AbortRequest {
  string reason = 1;      // Why we are aborting.
}

message AbortResponse {
  string error = 1;     
}

message Request {
  oneof request {
    LoadGraphRequest load_graph = 1;
    StartSubsystemRequest start_subsystem = 2;
    StopSubsystemRequest stop_subsystem = 3;
    GetSubsystemsRequest get_subsystems = 4;
    GetAlarmsRequest get_alarms = 5;
    AbortRequest abort = 6;  }
}

message Response {
  oneof response {
    LoadGraphResponse load_graph = 1;
    StartSubsystemResponse start_subsystem = 2;
    StopSubsystemResponse stop_subsystem = 3;
    GetSubsystemsResponse get_subsystems = 4;
    GetAlarmsResponse get_alarms = 5;
    AbortResponse abort = 6;  }
}
